AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Resources:
  ThePlayer007MediaConvertSource:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "theplayer007-mediaconvert-source"

  ThePlayer007MediaConvertDestination:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "theplayer007-mediaconvert-destination"

  MediaConvertSnsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: "mediaconvert-sns-topic"

  MediaConvertSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: "mohitfury1997@gmail.com"
      Protocol: "email"
      SubscriptionRoleArn: String
      TopicArn: !GetAtt MediaConvertSnsTopic.Arn

  MediaConvertEventBridgeEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: "It monitors the media convert job state change event"
      EventPattern: 
        source:
          - MyTestApp
        detail-type: 
          - "MediaConvert Job State Change"
        
      Name: "mediaconvert-job-state-change-rule"
      RoleArn: String
      Targets: 
        - 
          Arn: 
            Ref: "MySNSTopic"
          Id: "MediaConvertJobStateChange"
    
  MediaConvertLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaCloudwatchPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

        - PolicyName: "LambdaMediaConvertPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                 - "mediaconvert:*"
                 - "s3:ListAllMyBuckets"
                 - "s3:ListBucket"
                Resource: "*"
        - PolicyName: "PassRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: "*"
                Condition:
                  StringLike:
                    iam:PassedToService:
                      - "mediaconvert.amazonaws.com"

  MediaConvertS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "mediaconvert.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "MediaConvertS3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                  - "s3-object-lambda:*"
                Resource: "*"

  MediaConvertFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: "lambda_function.lambda_handler"
      Runtime: "python3.10"
      CodeUri: "../terraform/lambda_function.zip"
      Role: !GetAtt MediaConvertLambdaExecutionRole.Arn
      Environment:
        Variables:
          DestinationBucket: !Ref ThePlayer007MediaConvertDestination
          MediaConvertRole: !GetAtt MediaConvertS3Role.Arn
      Events:
        S3Event:
          Type: "S3"
          Properties:
            Bucket: !Ref ThePlayer007MediaConvertSource
            Events: "s3:ObjectCreated:*"

  MediaConvertCloudfrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig: 
        Description: "mediaconvert-s3-oac"
        Name: "mediaconvert-s3-oac"
        OriginAccessControlOriginType: "s3"
        SigningBehavior: "always"
        SigningProtocol: "sigv4"

  MediaConvertCloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: "S3Origin"
            DomainName: !GetAtt ThePlayer007MediaConvertDestination.DomainName
            OriginAccessControlId: !GetAtt MediaConvertCloudfrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${AWS::StackName}"
        DefaultCacheBehavior:
          Compress: true
          SmoothStreaming: false
          TargetOriginId: "S3Origin"
          ViewerProtocolPolicy: "redirect-to-https"
          AllowedMethods: ["GET"]
          CachedMethods: ["GET"]
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: "index.html"
        IPV6Enabled : false,
        PriceClass: "PriceClass_200"

# Outputs:
#   LambdaFunctionArn:
#     Value: !GetAtt MyLambdaFunction.Arn
#   S3BucketName:
#     Value: !Ref MyS3Bucket
